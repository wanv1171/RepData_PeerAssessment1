newMatrix <- matrix(sample(1:50, 25, replace=TRUE), nrow = 5,ncol = 5)
pseudoMatrix <- makeMatrix(newMatrix)
matrixSolver <- cacheSolve(pseudoMatrix)
matrixSolver
pseudoMatrix
matrixSolver
newMatrix
makeCacheMatrix <- function(x = matrix()) {
if (!is.matrix(x)) {
message("This is not a valid matrix")
return()
}
im <- NULL
set <- function(y) {
if (!is.matrix(x)) {
message("This is not a valid matrix")
return()
}
x <<- y
im <<- NULL
}
get <- function() return(x)
setInverse <- function(inverseMatrix) im <<- inverseMatrix
getInverse <- function() return(im)
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
wrongMatrix = c(1,2)
wrongCache = makeCacheMatrix(wrongMatrix)
wrongCache <- makeCacheMatrix(wrongMatrix)
wrongCache <- makeCacheMatrix(newMatrix)
wrongCahce.set(wrongMatrix)
wrongCache$set(wrongMatrix)
makeCacheMatrix <- function(x = matrix()) {
if (!is.matrix(x)) {
message("This is not a valid matrix")
return()
}
im <- NULL
set <- function(y) {
if (!is.matrix(y)) {
message("This is not a valid matrix")
return()
}
x <<- y
im <<- NULL
}
get <- function() return(x)
setInverse <- function(inverseMatrix) im <<- inverseMatrix
getInverse <- function() return(im)
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
wrongCache$set(wrongMatrix)
makeCacheMatrix <- function(x = matrix()) {
if (!is.matrix(x)) {
message("This is not a valid matrix")
return()
}
im <- NULL
set <- function(y) {
if (!is.matrix(y)) {
message("This is not a valid matrix")
return()
}
else {
x <<- y
im <<- NULL
}
}
get <- function() return(x)
setInverse <- function(inverseMatrix) im <<- inverseMatrix
getInverse <- function() return(im)
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
wrongCache$set(wrongMatrix)
wrongCache <- makeCacheMatrix(newMatrix)
wrongCache$set(wrongMatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
wrongCache <- makeCacheMatrix(newMatrix)
wrongSolver <- cacheSolve(wrongCache)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting inversed matrix..")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
wrongCache <- makeCacheMatrix(newMatrix)
wrongSolver <- cacheSolve(wrongCache)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting inversed matrix..")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
wrongCache <- makeCacheMatrix(newMatrix)
wrongSolver <- cacheSolve(wrongCache)
wrongSolver <- cacheSolve(wrongCache)
View(makeCacheMatrix)
wrongCache <- makeCacheMatrix(newMatrix)
wrongSolver <- cacheSolve(wrongCache)
wrongCache$getinverse()
wrongCache <- makeCacheMatrix(newMatrix)
wrongCache$get()
wrongCache$getinverse()
wrongSolver <- cacheSolve(wrongCache)
cachSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting inversed matrix..")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
wrongSolver <- cacheSolve(wrongCache)
wrongSolver <- cachSolve(wrongCache)
wrongSolver
rm(list = lsf.str())
rm(list = lsf.str())
rm(list = lsf.str())
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting inversed matrix..")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
newMatrix <- matrix(sample(c(10,50), 25, replace=TRUE),nrow = 5,ncol = 5)
newMatrix <- matrix(10:50, 25, replace=TRUE),nrow = 5,ncol = 5)
newMatrix <- matrix(sample(10:50, 25, replace=TRUE),nrow = 5,ncol = 5)
wrongCache <- makeCacheMatrix(newMatrix)
wrongSolver <- cacheSolve(wrongCache)
wrongSolver <- cachSolve(wrongCache)
newMatrix <- matrix(sample(c(10,50), 25, replace=TRUE),nrow = 5,ncol = 5)
wrongSolver
newMatrix
newMatrix <- matrix(sample(10:50, 25, replace=TRUE),nrow = 5,ncol = 5)
wrongCache$set(newMatrix)
wrongSolver
wrongSolver <- cacheSolve(wrongCache)
wrongSolver <- cachSolve(wrongCache)
wrongSolver
newFunc <- function(solve) return(mean)
newFunc91
newFunc(1)
newFunc(1)
newFunc <- function(x) return(x+1)
newFunc(1)
newFunc <- function(x) return(mean)
newFunc(1)
rm(list=ls())
library(datasets)
data("iris")
?iris
head(iris)
mean(iris[Species == "virginica", "Sepal.Length"],na.rm=TRUE)
mean(iris[iris$Species== "virginica", "Sepal.Length"],na.rm=TRUE)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data("mtcars")
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
abs(mean(mtcars[mtcars$cyl==4,"hp"],na.rm=TRUE) - mean(mtcars[mtcars$cyl==8,"hp"],na.rm=TRUE))
debug(ls)
ls
rm(list=ls())
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
exit
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
exit()
a
a
bye()
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- readLines(con)
sapply(c(10, 20, 30, 100), function(line) {
print(nchar(html[line]))
})
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "Q3Q1.csv")
df <- read.csv(file = "Q3Q1.csv", sep=",")
df <- df[df$ACR >= 3 & df$AGS >= 6,]
df <- read.csv(file = "Q3Q1.csv", sep=",")
agricultureLogical <- c(df$acr >=3 & df$ags >= 6)
which(agricultureLogical)
agricultureLogical <- df$acr >=3 & df$ags >= 6
agricultureLogical <- df$acr >=3 & df$ags >= 6
which(agricultureLogical)
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
agricultureLogical <- df$ACR == 3 & df$AGS == 6
agricultureLogical <- c(df$ACR >=3 & df$AGS >= 6)
rm(agricultureLogical)
agricultureLogical <- c(df$ACR >=3 & df$AGS >= 6)
which(agricultureLogical)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
jpeg <- readlines(con)
jpeg <- readLines(con)
rm(con)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "Q3Q2.jpg")
jpeg(file = "Q3Q2.jpg")
jpeg(file = "Q3Q2.jpg", native = TRUE)
jpg <- readJPEG(file="Q3Q2.jpg",native=TRUE)
jpg <- readJPEG(source="Q3Q2.jpg",native=TRUE)
getwd()
jpg <- readJPEG(source="Q3Q2.jpg",native=TRUE)
f <- file.path(getwd(), "Q3Q2.jpg")
img <- readJPEG(f, native = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "Q3Q2.jpg")
jpg <- readJPEG(source="Q3Q2.jpg",native=TRUE)
quantile(img, probs=(0.3, 0.8))
quantile(img, probs=c(0.3, 0.8))
quantile(jpg, probs=c(0.3, 0.8))
jpg <- readJPEG(source="Q3Q2.jpg",native=TRUE)
library(knitr)
install.packages("knitr")
library(knitr)
rm(list=ls())
getwd()
setwd("D:\Dropbox\Coursera\RepData_PeerAssessment1\activity.zip")
setwd("D:\\Dropbox\\Coursera\\RepData_PeerAssessment1\\activity.zip")
setwd("D:\\Dropbox\\Coursera\\RepData_PeerAssessment1\\")
unzip(zipfile = "activity.zip")
activity <- read.csv(file="activity/activity.csv", sep=",", quote="\"")
unzip(zipfile = "activity.zip")
activity <- read.csv(file="activity.csv", sep=",", quote="\"")
activity <- read.csv(file="activity.csv", sep=",", quote="\"", stringsAsFactor = FALSE)
totalSteps <- sum(activity$steps, na.rm=TRUE)
meanSteps <- totalSteps/levels(activity$date)
levels(activity$date)
activity <- read.csv(file="activity.csv", sep=",", quote="\"")
totalSteps <- sum(activity$steps, na.rm=TRUE)
meanSteps <- totalSteps/levels(activity$date)
levels(activity$date)
class(levels(activity$date))
meanSteps <- totalSteps/as.numeric(levels(activity$date))
?count
??count
length(levels(activity$date))
meanSteps <- totalSteps/length(activity$date)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
rm(meanSteps)
stepsTaken <- activity[!is.na(activity$steps), c("steps, date")]
stepsTaken <- aggregate(stepsTaken$steps, stepsTaken$date, FUN=sum)
rm(totalSteps)
stepsTaken <- activity[!is.na(activity$steps), c("steps, date")]
stepsTaken <- activity[!is.na(activity$steps), c("steps", "date")]
stepsTaken <- aggregate(stepsTaken$steps, stepsTaken$date, FUN=sum)
stepsTaken <- aggregate(steps ~ date, data=stepsTaken, FUN=sum)
hist(height = stepsTaken$steps, xlab = "Number of Steps Taken per Day", ylab="Frequency")
hist(stepsTaken$steps, xlab = "Number of Steps Taken per Day", ylab="Frequency")
as.data.frame(meanSteps, col.names("Mean Steps"))
meanSteps = mean(stepsTaken$steps)
print(as.data.frame(meanSteps, col.names("Mean Steps")))
as.data.frame(meanSteps, col.names(c("Mean Steps")))
as.data.frame(meanSteps, col.names("Mean Steps"))
meanSteps = mean(stepsTaken$steps)
print(as.data.frame(meanSteps, col.names = "Mean Steps"))
medianSteps = median(stepsTaken$steps)
print(as.data.frame(medianSteps, col.names = "Median Steps"))
as.data.frame(meanSteps, col.names = c("Mean Steps"))
meanStepsDF <- as.data.frame(meanSteps, col.names = c("Mean Steps"))
View(activity)
intervalSteps <- aggregate(steps ~ interval + date, data=activityNoNA, FUN=mean)
activityNoNA <- activity[!is.na(activity$steps),]
intervalSteps <- aggregate(steps ~ interval + date, data=activityNoNA, FUN=mean)
View(intervalSteps)
intervalSteps <- aggregate(steps ~ interval, data=activityNoNA, FUN=sum)
View(stepsTaken)
View(intervalSteps)
intervalSteps <- aggregate(steps ~ interval, data=activityNoNA, FUN=avg)
intervalSteps <- aggregate(steps ~ interval, data=activityNoNA, FUN=mean)
View(intervalSteps)
totalNAs <- nrows(activity[rowSums(is.na(activity)) > 0,])
nrows
totalNAs <- nrow(activity[rowSums(is.na(activity)) > 0,])
totalNAs <- nrow(activity[sum(is.na(activity$date),is.na(activity$interval)) > 0,])
print(totalNAs)
nrow(activity[is.na(activity$date),])
nrow(activity[is.na(activity$interval),])
daySteps <- aggregate(steps ~ date, data=activityNoNA, FUN=sum)
View(intervalSteps)
View(intervalSteps)
max(intervalSteps$steps)
interval[max(intervalSteps$steps),]
intervalSteps[max(intervalSteps$steps),]
intervalSteps[order(steps),][1]
intervalSteps[order(intervalSteps$steps),]
intervalSteps[order(-intervalSteps$steps),][1]
intervalSteps[order(-intervalSteps$steps),]
str(intervalSteps[order(-intervalSteps$steps),])
str(intervalSteps[order(-intervalSteps$steps),])[[1]]
intervalSteps[order(-intervalSteps$steps),][[1]
]
intervalSteps[order(-intervalSteps$steps),][[1]][1]
activity[1,]
rm(meanStepsDF)
View(daySteps)
dayMeanSteps <- aggregate(steps ~ date, data=activityNoNA, FUN=mean)
dayMeanSteps <- aggregate(steps ~ date, data=activity, FUN=mean)
View(dayMeanSteps)
View(activity)
View(intervalSteps)
length(unique(activity$interval))
activityFill$steps <- ifelse(is.na(activityFill$steps == TRUE, intervalSteps[intervalSteps$interval == activityFill$interval, "steps"], activityFill$steps))
activityFill <- activity
activityFill$steps <- ifelse(is.na(activityFill$steps == TRUE, intervalSteps[intervalSteps$interval == activityFill$interval, "steps"], activityFill$steps))
activityFill$steps <- ifelse(is.na(activityFill$steps) == TRUE, intervalSteps[intervalSteps$interval == activityFill$interval, "steps"], activityFill$steps)
View(activityFill)
dayStepsFill <- aggregate(steps ~ date, data=activityFill, FUN=sum)
hist(x=dayStepsFill$steps, xlab = "Number of Steps Taken per Day (Filled)", ylab="Frequency", main = "Total Steps Taken per Day vs Frequncy (Filled)")
weekdays(strptime("2010-01-01",format= "%Y-%m-%d"))
weekdays(strptime("2010-01-01",format= "%Y-%m-%d")) == "Friday"
Sys.setlocale("LC_ALL","English")
weekdays(strptime("2010-01-01",format= "%Y-%m-%d")) == "Friday"
```{r}
activityFill$date <- strptime(activityFill$date, format="%Y-%m-%d")
activityFill$dayOfWeek <- sapply(activityFill$date, FUN=function(dateVal) {
if (weekdays(dateVal) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")){
return("weekday")
}
else{
return("weekend")
}
})
activityFill$dayOfWeek <- as.factor(activityFill$dayOfWeek)
dayOfWeek[1, "dayOfWeek"] == 1
activityFill[1, "dayOfWeek"] == 1
activityFill[1, "dayOfWeek"] == 2
activityFill[1, "dayOfWeek"] == 'weekend'
activityFill[1, "dayOfWeek"] == "weekend"
activityFill[1, "dayOfWeek"]
activityFill[1, "dayOfWeek"] == "weekday"
avgDayStepsFill <- aggregate(steps~date+dayOfWeek, data=activityFill, FUN=mean)
avgDayStepsFill <- aggregate(steps~date+dayOfWeek, data=activityFill, FUN=mean)
activityFill <- activity
## If steps is NA, the value will be replaced by mean of the corresponding interval, otherwise, it stays
activityFill$steps <- ifelse(is.na(activityFill$steps) == TRUE, intervalSteps[intervalSteps$interval == activityFill$interval, "steps"], activityFill$steps)
activityFill$dayOfWeek <- sapply(activityFill$date, FUN=function(dateVal) {
dateVal <- strptime(activityFill$date, format="%Y-%m-%d")
if (weekdays(dateVal) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")){
return("weekday")
}
else{
return("weekend")
}
})
activityFill$dayOfWeek <- sapply(activityFill$date, FUN=function(dateVal) {
dateVal <- strptime(dateVal, format="%Y-%m-%d")
if (weekdays(dateVal) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")){
return("weekday")
}
else{
return("weekend")
}
})
activityFill$dayOfWeek <- as.factor(activityFill$dayOfWeek)
avgDayStepsFill <- aggregate(steps~date+dayOfWeek, data=activityFill, FUN=mean)
View(avgDayStepsFill)
avgDayStepsFill <- aggregate(steps~interval, data=activityFill, FUN=mean)
avgDayStepsFill <- aggregate(steps~interval+dayOfWeek, data=activityFill, FUN=mean)
View(avgDayStepsFill)
ggplot(aes(group = dayOfWeek)) + geom_line(x= avgDayStepsFill$interval, y=avgDayStepsFill$steps)
library(ggplot2)
ggplot(aes(group = dayOfWeek)) + geom_line(x= avgDayStepsFill$interval, y=avgDayStepsFill$steps)
ggplot() + geom_line(aes(x= avgDayStepsFill$interval, y=avgDayStepsFill$steps, group = dayOfWeek))
ggplot() + geom_line(aes(x= interval, y=steps, data=avgDayStepsFill, group = dayOfWeek))
ggplot(data=avgDayStepsFill) + geom_line(aes(x= interval, y=steps,  group = dayOfWeek))
ggplot(data=avgDayStepsFill, aes(color = dayOfWeek)) +
geom_line(aes(x= interval, y=steps,  group = dayOfWeek)) +
labs(xlab="Interval", ylab="Steps", color = dayOfWeek)
ggplot(data=avgDayStepsFill, aes(color = dayOfWeek)) +
geom_line(aes(x= interval, y=steps,  group = dayOfWeek)) +
labs(xlab="Interval", ylab="Steps", colour = dayOfWeek)
ggplot(data=avgDayStepsFill, aes(color = dayOfWeek)) +
geom_line(aes(x= interval, y=steps,  group = dayOfWeek)) +
labs(xlab="Interval", ylab="Steps", color = avgDayStepsFill$dayOfWeek)
ggplot(data=avgDayStepsFill, aes(color = dayOfWeek)) +
geom_line(aes(x= interval, y=steps,  group = dayOfWeek)) +
labs(xlab="Interval", ylab="Steps", main="Steps in Weekdays vs Weekends (Filled)",color = avgDayStepsFill$dayOfWeek)
ggplot(aes(color = dayOfWeek)) +
geom_line(aes(x= avgDayStepsFill$interval, y=avgDayStepsFill$steps,  group = avgDayStepsFill$dayOfWeek)) +
labs(xlab="Interval", ylab="Steps", main="Steps in Weekdays vs Weekends (Filled)",color = avgDayStepsFill$dayOfWeek)
ggplot(data=avgDayStepsFill, aes(color = dayOfWeek)) +
geom_line(aes(x= interval, y=steps,  group = avgDayStepsFill$dayOfWeek)) +
labs(xlab="Interval", ylab="Steps", main="Steps in Weekdays vs Weekends (Filled)",color = avgDayStepsFill$dayOfWeek)
avgDayStepsFill <- aggregate(steps~interval+dayOfWeek, data=activityFill, FUN=mean)
ggplot(data=avgDayStepsFill, aes(color = dayOfWeek)) +
geom_line(aes(x= interval, y=steps,  group = avgDayStepsFill$dayOfWeek)) +
labs(xlab="Interval", ylab="Steps", main="Steps in Weekdays vs Weekends (Filled)",color = avgDayStepsFill$dayOfWeek)
avgDayStepsFill <- aggregate(steps~interval+dayOfWeek, data=activityFill, FUN=mean)
avgDayStepsFillWeekday <- avgDayStepsFill[avgDayStepsFill$dayOfWeek == "weekday",]
avgDayStepsFillWeekend <- avgDayStepsFill[avgDayStepsFill$dayOfWeek == "weekday",]
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, avgDayStepsFillWeekend$interval, avgDayStepsFillWeekend$steps)
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps)
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l")
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="orange")
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="red")
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="red")
lines(avgDayStepsFillWeekend$interval, avgDayStepsFillWeekend$steps, col="blue")
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="red")
lines(avgDayStepsFillWeekend$interval, avgDayStepsFillWeekend$steps, col="blue")
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="red")
lines(avgDayStepsFillWeekend$interval, avgDayStepsFillWeekend$steps, col="blue")
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="red")
avgDayStepsFill <- aggregate(steps~interval+dayOfWeek, data=activityFill, FUN=mean)
avgDayStepsFillWeekday <- avgDayStepsFill[avgDayStepsFill$dayOfWeek == "weekday",]
avgDayStepsFillWeekend <- avgDayStepsFill[avgDayStepsFill$dayOfWeek == "weekend",]
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="red")
lines(avgDayStepsFillWeekend$interval, avgDayStepsFillWeekend$steps, col="blue")
avgDayStepsFill <- aggregate(steps~interval+dayOfWeek, data=activityFill, FUN=mean)
avgDayStepsFillWeekday <- avgDayStepsFill[avgDayStepsFill$dayOfWeek == "weekday",]
avgDayStepsFillWeekend <- avgDayStepsFill[avgDayStepsFill$dayOfWeek == "weekend",]
plot(avgDayStepsFillWeekday$interval, avgDayStepsFillWeekday$steps, type="l", col="red", xlab="Interval", ylab="Steps", main="Avg Steps by Intervals, Weekdays vs Weekends (Filled)")
lines(avgDayStepsFillWeekend$interval, avgDayStepsFillWeekend$steps, col="blue")
legend("topright",legend = c("Weekday","Weekend"), col=c("red","blue"), lty=1)
